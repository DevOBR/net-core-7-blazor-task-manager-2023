@page "/tasks"
<!-- injection  -->
@inject IWebRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<h3>Taks</h3>

@if (Tasks is null)
{
    // due to the first time the request takes some minutes, tasks could be null
    <p>Loading...</p>
}
else
{
    <a href="/tasks/create" class="btn btn-primary">New Task</a>

    <table class="table">
        <thead>
            <tr>
                <th>Description</th>
                <th>Date</th>
                <th>Is Completed</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in Tasks)
            {
                <tr>
                    <td>@task.Description</td>
                    <td>@($"{task.Date:yyyy/MM/dd}")</td>
                    <td>@task.IsCompleted</td>
                    <td>
                        <a href="/tasks/edit/@task.Id" class="btn btn-warning">Edit</a>
                        <button class="btn @(task.IsCompleted ? "btn-secondary" : "btn-info")" @onclick="@(() => CompleteAndUncomplete(task))">@(task.IsCompleted ? "Uncomplete" : "Complete")</button>
                        <button class="btn btn-danger" @onclick="@(() => DeleteAsync(task))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<MyTaskDto>? Tasks { get; set; }


    // on init
    protected override async Task OnInitializedAsync()
    {
        await LoadTasksAsync();
    }

    private async Task DeleteAsync(MyTaskDto task)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmation",
            Text = $"Are you sure you want to delete \"{task.Description}\"?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true
        });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync<MyTaskDto>($"/api/MyTasks/{task.Id}");

        if (!responseHttp.IsSuccess)
        {
            await sweetAlertService.FireAsync("Error!", responseHttp.Message, SweetAlertIcon.Error);
            return;
        }

        Return();

        await LoadTasksAsync();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
        {
            Toast = true,
            Position = SweetAlertPosition.BottomEnd,
            ShowCloseButton = true,
            Timer = 3000
        });

        await toast.FireAsync(icon: SweetAlertIcon.Info, message: "Task deleted successfully.");
    }

    private async Task CompleteAndUncomplete(MyTaskDto task)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmation",
            Text = $"Are you sure to {(task.IsCompleted ? "uncomplete" : "complete")} the task \"{task.Description}\"?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true
        });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        task.IsCompleted = !task.IsCompleted;

        var responseHttp = await repository.PutAsync($"/api/MyTasks", task);

        if (!responseHttp.IsSuccess)
        {
            await sweetAlertService.FireAsync("Error!", responseHttp.Message, SweetAlertIcon.Error);
            return;
        }

        Return();

        await LoadTasksAsync();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
        {
            Toast = true,
            Position = SweetAlertPosition.BottomEnd,
            ShowCloseButton = true,
            Timer = 3000
        });

        await toast.FireAsync(icon: SweetAlertIcon.Info, message: $"Task {(task.IsCompleted ? "uncomplete" : "complete")} successfully.");
    }

    private void Return()
    {
        navigationManager.NavigateTo("/tasks");
    }

    private async Task LoadTasksAsync()
    {
        var responseHttp = await repository.GetAsync<List<MyTaskDto>>("api/mytasks");

        if (!responseHttp.IsSuccess)
        {
            await sweetAlertService.FireAsync("Error!", responseHttp.Message, SweetAlertIcon.Error);
            return;
        }

        Tasks = responseHttp.Result;
    }
}

